module Jenkins
  class FilePath
    def write_native(content)
      @native.write(content, "UTF-8")
    end
    def read_native
      @native.readToString()
    end
  end
end
class GrmlLiveChangelistBuilder < Jenkins::Tasks::Builder

  display_name "grml-live: generate changelist"

  attr_accessor :output_filename, :dpkg_list_old_name, :package_prefix, :git_url_base

  def options
    [:output_filename, :dpkg_list_old_name, :package_prefix, :git_url_base]
  end

  def initialize(attrs)
    options.each do |sym|
      send(sym.to_s + '=', attrs[sym.to_s])
    end
  end

  def prebuild(build, listener)
    # strip all options
    options.each do |sym|
      next if send(sym.to_s).nil?
      if send(sym.to_s).respond_to?(:strip) and send(sym.to_s).strip.empty?
        send(sym.to_s + '=', nil)
      end
    end
  end

  def parse_package_list(s)
    h = Hash.new
    s.split("\n").each do |line|
      m = line.match /^ii\s+(\S+)\s+(\S+)\s/
      if m
        h[m[1]] = m[2]
      end
    end
    h
  end

  def perform(build, launcher, listener)
    workingpath = build.workspace.join("packages")
    workingpath.mkdir
    rwd = workingpath.realpath
    tmpscript = workingpath.join("log.sh")
    output_filepath = build.workspace.join(output_filename || "changelog.txt")
    output_filepath.write_native <<EOF
------------------------------------------------------------------------
Generated by GrmlLiveChangelistBuilder for job
#{build.env['JOB_NAME']} #{build.env['BUILD_ID']}
------------------------------------------------------------------------
EOF

    package_list = build.workspace.join("grml_logs").join("fai").join("dpkg.list")
    package_list_old = build.workspace.join(dpkg_list_old_name || "dpkg.list.old")
    if not package_list.exist?
      listener.error "Could not read package list #{package_list.realpath}"
      return
    end

    packages = parse_package_list(package_list.read_native)
    packages_old = Hash.new
    begin
      packages_old = parse_package_list(package_list_old.read_native)
    rescue => e
      listener.info "While parsing old package list: #{e}"
    end

    debian_changes = {:removed => [], :added => [], :changed => []}

    (packages_old.keys-packages.keys).each do |package|
      if package.match "^#{package_prefix}"
        script=<<-EOF
D="#{output_filepath.realpath}"
echo "#{package}" >> $D
echo "Removed." >> $D
echo "------------------------------------------------------------------------" >> $D
        EOF
        tmpscript.write_native script
        launcher.execute ["bash", "log.sh"], :chdir => rwd, :out => listener
      else
        debian_changes[:removed] << package
      end
    end

    packages.each do |package,version|
      old_version = packages_old[package]
      if package.match "^#{package_prefix}"
        begin
          listener.info "Generating changes list for package %s..." % package
          if old_version
            listener.info "Version %s -> %s" % [old_version, version]
            next if old_version == version
          end
# ------
          # clone repo
          git_url = '%s/%s' % [git_url_base, package]
          gitpath = workingpath.join(package+'.git')
          rgitpath = gitpath.realpath
          if !gitpath.exist?
            launcher.execute ["git", "clone", "--mirror", git_url], :chdir => rwd, :out => listener
          end
          raise "Repository not found" unless gitpath.exist?

          # update repo
          launcher.execute ["git", "remote", "set-url", "origin", git_url], :chdir => rgitpath, :out => listener
          if launcher.execute(["git", "remote", "update", "--prune"], :chdir => rgitpath, :out => listener) != 0
            raise 'git clone/update failed'
          end

# ------


          if old_version
            range = "v%s..v%s" % [old_version, version]
          else
            range = "v%s" % version
          end

          script=<<-EOF
D="#{output_filepath.realpath}"
echo "#{package} #{range}" >> $D
echo "Changes:" >> $D
cd #{rgitpath} && git log --oneline "#{range}" >> $D
if [ $? != 0 ]; then
  echo "(failed)" >> $D
fi
echo "------------------------------------------------------------------------" >> $D
          EOF
          tmpscript.write_native script
          launcher.execute ["bash", "log.sh"], :chdir => rwd, :out => listener
        rescue => e
          listener.warn "Generating change report for package #{package} failed: #{e}"
        end
      else
        if old_version
          next if old_version == version
          debian_changes[:changed] << "%s %s -> %s" % [package, old_version, version]
        else
          debian_changes[:added] << package
        end
      end
    end

    changelog = output_filepath.read_native
    changelog +=<<-EOF
Changes to Debian package list:
  Added:
    #{debian_changes[:added].join("\n    ").strip}
  Changed:
    #{debian_changes[:changed].join("\n    ").strip}
  Removed:
    #{debian_changes[:removed].join("\n    ").strip}
------------------------------------------------------------------------
    EOF
    output_filepath.write_native changelog

  ensure
    tmpscript.unlink
  end
end
